OOP => Object-Oriented Programming Language

            OOP has 4 fundamental principles:
            1. Inheritance
            2. Polymorphism (method overloading + method overriding)
            3. Encapsulation
            4. Abstraction

          1. Inheritance: (based on real life concept of inheritance like eye colour, name, state, money etc.)
             It is a concept that transfers the properties from one class to other classes.
             We use "extends" keyword in child class to inherit the properties from parent class

            NOTE: But in coding, it's one-way => parent class can NOT use property of child class

         1. Why do we use inheritance?
         a) to prevent "repetition"
         b) to make "maintenance" easy
         c) to make our classes "atomic" (small)
         d) to maintain "readability" of the classes


         2. To make a class child to another class, we use "extends" keyword.
         3. Child classes can use class members from parent class. However, parent classes
            can't use anything from child classes (one-way relation)
         4. Every class in Java has a parent class. It's called "Object class".
            Object class is like Adam.. it doesn't have any parent.

         5. Inheritance types in Java
            a) Multilevel Inheritance  => Grandparent => parent => child
            b) Hierarchical Inheritance => Single parent => Many children
            c) Multiple Inheritance => more than one parent at the same level (Java doesn't support it)
            d) Opposite of "Multiple Inheritance" is "Single Inheritance"
              Java supports "Single Inheritance"

        NOTE: Java does not support "Multiple Inheritance". It supports "Single Inheritance"

        IS-A relationship and HAS-A relationship

        Animal IS-A child of Mammal => true
        Dog IS-A child of Mammal => true
        Dog IS-A child of Animal => true
        Cat IS_A Mammal => true

        Mammal HAS-A Animal => true
        Cat HAS-A Mammal => false
        Dog HAS-A Animal => false
        Dog HAS-A Mammal => false


       In Java, the relationship from parent to child is called a HAS-A Relationship (from top to bottom)
       In Java, the relationship from child to parent is called an IS-A Relationship (from bottom to top)



NOTES ABOUT "super()", "super" keyword + "this()" and "this" keyword

            1)"super" keyword is used to get data(variables + methods) from parent classes in inheritance

            2)If there is no data in parent, Java looks for the data in grandparents
              If no parent has the data, Java gives Compile Time Error (CTE)

            3)"super()" must be the first statement in the constructor body, but "super" can be in any line

            4)"super()" is for calling "constructors" from parent class, "super" is for calling variables and methods
              from the parent class

            5)"this" is used to call data from the class itself.
              When you use "this", it means you are telling Java "do not go to the parent, stay in this class"

            6) "this()" is used to tell Java to use the constructor of this class.
               "this(with parameter)" is used to tell Java to go to the parameterised constructor of this class,
                implement all codes in that constructor first and then come back and implement the constructor
                which had this(with parameter) used initially.